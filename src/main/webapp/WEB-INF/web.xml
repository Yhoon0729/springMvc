<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
	version="4.0" metadata-complete="true">
	<display-name>Archetype Created Web Application</display-name>
	
<!-- 	

	<servlet>
		<servlet-name>dispatcher1</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

		<init-param>
			<param-name>contextConfigLocation</param-name>
			xml 방식의 container
			<param-value>/WEB-INF/mvc-start.xml</param-value>
		</init-param>

		<load-on-startup>1</load-on-startup>
	</servlet>
	확장자 방식
	<servlet-mapping>
		<servlet-name>dispatcher1</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>

	dispatcher2
	<servlet>
		<servlet-name>dispatcher2</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

		<init-param>
			<param-name>contextConfigLocation</param-name>
			xml 방식의 container
			<param-value>/WEB-INF/mvc-start.xml</param-value>
		</init-param>

		<load-on-startup>1</load-on-startup>
	</servlet>
	확장자 방식
	<servlet-mapping>
		<servlet-name>dispatcher2</servlet-name>
		<url-pattern>*.do2</url-pattern>
	</servlet-mapping> -->

	<!-- dispatcher -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>	
		<load-on-startup>1</load-on-startup>
	</servlet>
	<!-- container이름 지정 안하면 default로 dispatcher-servlet.xml을 찾음 -->
	<!-- path 방식 -->
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
</web-app>
